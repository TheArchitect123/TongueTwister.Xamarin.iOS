//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FrenchPhraseBook.Backend.Proxy.KronosMobileService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Favourite", Namespace="http://schemas.datacontract.org/2004/07/FileKeeper.DataAccess")]
    public partial class Favourite : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string EnglishTextField;
        
        private string FrenchTextField;
        
        private int deviceIdField;
        
        private string idField;
        
        private System.Nullable<bool> isFavouritedField;
        
        private int phraseIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EnglishText {
            get {
                return this.EnglishTextField;
            }
            set {
                if ((object.ReferenceEquals(this.EnglishTextField, value) != true)) {
                    this.EnglishTextField = value;
                    this.RaisePropertyChanged("EnglishText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FrenchText {
            get {
                return this.FrenchTextField;
            }
            set {
                if ((object.ReferenceEquals(this.FrenchTextField, value) != true)) {
                    this.FrenchTextField = value;
                    this.RaisePropertyChanged("FrenchText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int deviceId {
            get {
                return this.deviceIdField;
            }
            set {
                if ((this.deviceIdField.Equals(value) != true)) {
                    this.deviceIdField = value;
                    this.RaisePropertyChanged("deviceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((object.ReferenceEquals(this.idField, value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> isFavourited {
            get {
                return this.isFavouritedField;
            }
            set {
                if ((this.isFavouritedField.Equals(value) != true)) {
                    this.isFavouritedField = value;
                    this.RaisePropertyChanged("isFavourited");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int phraseId {
            get {
                return this.phraseIdField;
            }
            set {
                if ((this.phraseIdField.Equals(value) != true)) {
                    this.phraseIdField = value;
                    this.RaisePropertyChanged("phraseId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="KronosMobileService.ITwisterWCFService")]
    public interface ITwisterWCFService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITwisterWCFService/GetFavourites", ReplyAction="http://tempuri.org/ITwisterWCFService/GetFavouritesResponse")]
        System.IAsyncResult BeginGetFavourites(FrenchPhraseBook.Backend.Proxy.KronosMobileService.Favourite data, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<FrenchPhraseBook.Backend.Proxy.KronosMobileService.Favourite> EndGetFavourites(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITwisterWCFService/SetFavourites", ReplyAction="http://tempuri.org/ITwisterWCFService/SetFavouritesResponse")]
        System.IAsyncResult BeginSetFavourites(System.AsyncCallback callback, object asyncState);
        
        void EndSetFavourites(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITwisterWCFServiceChannel : FrenchPhraseBook.Backend.Proxy.KronosMobileService.ITwisterWCFService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFavouritesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFavouritesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<FrenchPhraseBook.Backend.Proxy.KronosMobileService.Favourite> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<FrenchPhraseBook.Backend.Proxy.KronosMobileService.Favourite>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TwisterWCFServiceClient : System.ServiceModel.ClientBase<FrenchPhraseBook.Backend.Proxy.KronosMobileService.ITwisterWCFService>, FrenchPhraseBook.Backend.Proxy.KronosMobileService.ITwisterWCFService {
        
        private BeginOperationDelegate onBeginGetFavouritesDelegate;
        
        private EndOperationDelegate onEndGetFavouritesDelegate;
        
        private System.Threading.SendOrPostCallback onGetFavouritesCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetFavouritesDelegate;
        
        private EndOperationDelegate onEndSetFavouritesDelegate;
        
        private System.Threading.SendOrPostCallback onSetFavouritesCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TwisterWCFServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(TwisterWCFServiceClient.GetBindingForEndpoint(endpointConfiguration), TwisterWCFServiceClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public TwisterWCFServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(TwisterWCFServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public TwisterWCFServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(TwisterWCFServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public TwisterWCFServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetFavouritesCompletedEventArgs> GetFavouritesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetFavouritesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FrenchPhraseBook.Backend.Proxy.KronosMobileService.ITwisterWCFService.BeginGetFavourites(FrenchPhraseBook.Backend.Proxy.KronosMobileService.Favourite data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFavourites(data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<FrenchPhraseBook.Backend.Proxy.KronosMobileService.Favourite> FrenchPhraseBook.Backend.Proxy.KronosMobileService.ITwisterWCFService.EndGetFavourites(System.IAsyncResult result) {
            return base.Channel.EndGetFavourites(result);
        }
        
        private System.IAsyncResult OnBeginGetFavourites(object[] inValues, System.AsyncCallback callback, object asyncState) {
            FrenchPhraseBook.Backend.Proxy.KronosMobileService.Favourite data = ((FrenchPhraseBook.Backend.Proxy.KronosMobileService.Favourite)(inValues[0]));
            return ((FrenchPhraseBook.Backend.Proxy.KronosMobileService.ITwisterWCFService)(this)).BeginGetFavourites(data, callback, asyncState);
        }
        
        private object[] OnEndGetFavourites(System.IAsyncResult result) {
            System.Collections.Generic.List<FrenchPhraseBook.Backend.Proxy.KronosMobileService.Favourite> retVal = ((FrenchPhraseBook.Backend.Proxy.KronosMobileService.ITwisterWCFService)(this)).EndGetFavourites(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFavouritesCompleted(object state) {
            if ((this.GetFavouritesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFavouritesCompleted(this, new GetFavouritesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFavouritesAsync(FrenchPhraseBook.Backend.Proxy.KronosMobileService.Favourite data) {
            this.GetFavouritesAsync(data, null);
        }
        
        public void GetFavouritesAsync(FrenchPhraseBook.Backend.Proxy.KronosMobileService.Favourite data, object userState) {
            if ((this.onBeginGetFavouritesDelegate == null)) {
                this.onBeginGetFavouritesDelegate = new BeginOperationDelegate(this.OnBeginGetFavourites);
            }
            if ((this.onEndGetFavouritesDelegate == null)) {
                this.onEndGetFavouritesDelegate = new EndOperationDelegate(this.OnEndGetFavourites);
            }
            if ((this.onGetFavouritesCompletedDelegate == null)) {
                this.onGetFavouritesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFavouritesCompleted);
            }
            base.InvokeAsync(this.onBeginGetFavouritesDelegate, new object[] {
                        data}, this.onEndGetFavouritesDelegate, this.onGetFavouritesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FrenchPhraseBook.Backend.Proxy.KronosMobileService.ITwisterWCFService.BeginSetFavourites(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetFavourites(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void FrenchPhraseBook.Backend.Proxy.KronosMobileService.ITwisterWCFService.EndSetFavourites(System.IAsyncResult result) {
            base.Channel.EndSetFavourites(result);
        }
        
        private System.IAsyncResult OnBeginSetFavourites(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((FrenchPhraseBook.Backend.Proxy.KronosMobileService.ITwisterWCFService)(this)).BeginSetFavourites(callback, asyncState);
        }
        
        private object[] OnEndSetFavourites(System.IAsyncResult result) {
            ((FrenchPhraseBook.Backend.Proxy.KronosMobileService.ITwisterWCFService)(this)).EndSetFavourites(result);
            return null;
        }
        
        private void OnSetFavouritesCompleted(object state) {
            if ((this.SetFavouritesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetFavouritesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetFavouritesAsync() {
            this.SetFavouritesAsync(null);
        }
        
        public void SetFavouritesAsync(object userState) {
            if ((this.onBeginSetFavouritesDelegate == null)) {
                this.onBeginSetFavouritesDelegate = new BeginOperationDelegate(this.OnBeginSetFavourites);
            }
            if ((this.onEndSetFavouritesDelegate == null)) {
                this.onEndSetFavouritesDelegate = new EndOperationDelegate(this.OnEndSetFavourites);
            }
            if ((this.onSetFavouritesCompletedDelegate == null)) {
                this.onSetFavouritesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetFavouritesCompleted);
            }
            base.InvokeAsync(this.onBeginSetFavouritesDelegate, null, this.onEndSetFavouritesDelegate, this.onSetFavouritesCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override FrenchPhraseBook.Backend.Proxy.KronosMobileService.ITwisterWCFService CreateChannel() {
            return new TwisterWCFServiceClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITwisterWCFService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpsBinding_ITwisterWCFService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITwisterWCFService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost/Kronos.TongueTwister/TwisterWCFService.svc");
            }
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpsBinding_ITwisterWCFService)) {
                return new System.ServiceModel.EndpointAddress("https://laptop-461afooc/Kronos.TongueTwister/TwisterWCFService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private class TwisterWCFServiceClientChannel : ChannelBase<FrenchPhraseBook.Backend.Proxy.KronosMobileService.ITwisterWCFService>, FrenchPhraseBook.Backend.Proxy.KronosMobileService.ITwisterWCFService {
            
            public TwisterWCFServiceClientChannel(System.ServiceModel.ClientBase<FrenchPhraseBook.Backend.Proxy.KronosMobileService.ITwisterWCFService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetFavourites(FrenchPhraseBook.Backend.Proxy.KronosMobileService.Favourite data, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = data;
                System.IAsyncResult _result = base.BeginInvoke("GetFavourites", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<FrenchPhraseBook.Backend.Proxy.KronosMobileService.Favourite> EndGetFavourites(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<FrenchPhraseBook.Backend.Proxy.KronosMobileService.Favourite> _result = ((System.Collections.Generic.List<FrenchPhraseBook.Backend.Proxy.KronosMobileService.Favourite>)(base.EndInvoke("GetFavourites", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSetFavourites(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("SetFavourites", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSetFavourites(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SetFavourites", _args, result);
            }
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_ITwisterWCFService,
            
            BasicHttpsBinding_ITwisterWCFService,
        }
    }
}
